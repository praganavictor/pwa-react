{"version":3,"sources":["logo.svg","App.js","index.js","serviceWorker.js"],"names":["module","exports","App","className","src","logo","alt","ReactDOM","render","document","getElementById","navigator","window","addEventListener","serviceWorker","register","then","registration","catch","err"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,8KCiB5BC,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,2BCHRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SC+H3C,kBAAmBC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,UACTC,MAAK,SAASC,OAIdC,OAAM,SAASC,Y","file":"static/js/main.eaf554fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { registerServiceWorker } from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregisterServiceWorker();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === \"localhost\" ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === \"[::1]\" ||\n//     // 127.0.0.1/8 is considered localhost for IPv4.\n//     window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n// );\n\n// export function register(config) {\n//   if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n\n//     window.addEventListener(\"load\", () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             \"This web app is being served cache-first by a service \" +\n//               \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === \"installed\") {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 \"New content is available and will be used when all \" +\n//                   \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n//               );\n\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log(\"Content is cached for offline use.\");\n\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error(\"Error during service worker registration:\", error);\n//     });\n// }\n\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl)\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get(\"content-type\");\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf(\"javascript\") === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\"No internet connection found. App is running in offline mode.\");\n//     });\n// }\n\n// export function unregister() {\n//   if (\"serviceWorker\" in navigator) {\n//     navigator.serviceWorker.ready.then(registration => {\n//       registration.unregister();\n//     });\n//   }\n// }\n\nexport const registerServiceWorker = () => {\n  if (\"serviceWorker\" in navigator) {\n    window.addEventListener(\"load\", function() {\n      navigator.serviceWorker\n        .register(\"/sw.js\")\n        .then(function(registration) {\n          // Registration was successful\n          //console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        })\n        .catch(function(err) {\n          // registration failed :(\n          //console.log('ServiceWorker registration failed: ', err);\n        });\n    });\n  }\n};\n"],"sourceRoot":""}